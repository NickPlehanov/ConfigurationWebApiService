// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ConfigurationWebApiService.Models;

namespace ConfigurationWebApiService.Data
{
    public partial class ConfugurationManagerDbContext : DbContext
    {
        public event EventHandler<EntityChangedEventArgs<object>> SavingChanges;

        public override int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            // You must decide to either throw or block here (see above).

            // Example code for blocking.
            var args = new EntityChangedEventArgs<object>();
            SavingChanges?.Invoke(this, args);

            return base.SaveChanges(acceptAllChangesOnSuccess);
        }
        public ConfugurationManagerDbContext()
        {
        }

        public ConfugurationManagerDbContext(DbContextOptions<ConfugurationManagerDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ColourSchemaConfiguration> ColourSchemaConfiguration { get; set; }
        public virtual DbSet<ColourSchemas> ColourSchemas { get; set; }
        public virtual DbSet<Configurations> Configurations { get; set; }
        public virtual DbSet<EventSubscription> EventSubscription { get; set; }
        public virtual DbSet<FontConfiguration> FontConfiguration { get; set; }
        public virtual DbSet<Fonts> Fonts { get; set; }
        public virtual DbSet<HotKeyConfigurations> HotKeyConfigurations { get; set; }
        public virtual DbSet<Hotkeys> Hotkeys { get; set; }
        public virtual DbSet<SubscriptionEventSubscription> SubscriptionEventSubscription { get; set; }
        public virtual DbSet<Subscriptions> Subscriptions { get; set; }
        public virtual DbSet<UserConfiguration> UserConfiguration { get; set; }
        public virtual DbSet<UserSubscriptions> UserSubscriptions { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<WindowLocationConfiguration> WindowLocationConfiguration { get; set; }
        public virtual DbSet<WindowLocations> WindowLocations { get; set; }
        public virtual DbSet<ConfigurationWebApiService.Models.Windows> Windows { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=ConfugurationManagerDb;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ColourSchemaConfiguration>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.ColourSchema)
                    .WithMany(p => p.ColourSchemaConfiguration)
                    .HasForeignKey(d => d.ColourSchemaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ColourSchemaConfiguration_To_ColourSchemas");

                entity.HasOne(d => d.Configuration)
                    .WithMany(p => p.ColourSchemaConfiguration)
                    .HasForeignKey(d => d.ConfigurationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ColourSchemaConfiguration_To_Configurations");
            });

            modelBuilder.Entity<ColourSchemas>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<Configurations>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<EventSubscription>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<FontConfiguration>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Configuration)
                    .WithMany(p => p.FontConfiguration)
                    .HasForeignKey(d => d.ConfigurationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FontConfiguration_To_Configurations");

                entity.HasOne(d => d.Font)
                    .WithMany(p => p.FontConfiguration)
                    .HasForeignKey(d => d.FontId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FontConfiguration_To_Fonts");
            });

            modelBuilder.Entity<Fonts>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<HotKeyConfigurations>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Configuration)
                    .WithMany(p => p.HotKeyConfigurations)
                    .HasForeignKey(d => d.ConfigurationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HotKeyConfigurations_To_Configurations");

                entity.HasOne(d => d.HotKey)
                    .WithMany(p => p.HotKeyConfigurations)
                    .HasForeignKey(d => d.HotKeyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HotKeyConfigurations_To_Hotkeys");
            });

            modelBuilder.Entity<Hotkeys>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<SubscriptionEventSubscription>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.EventSubscription)
                    .WithMany(p => p.SubscriptionEventSubscription)
                    .HasForeignKey(d => d.EventSubscriptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionEvent_To_EventSubscription");

                entity.HasOne(d => d.Subscription)
                    .WithMany(p => p.SubscriptionEventSubscription)
                    .HasForeignKey(d => d.SubscriptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionEvent_To_Subscription");
            });

            modelBuilder.Entity<Subscriptions>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<UserConfiguration>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Configuration)
                    .WithMany(p => p.UserConfiguration)
                    .HasForeignKey(d => d.ConfigurationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserConfiguration_To_Configurations");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserConfiguration)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserConfiguration_To_Users");
            });

            modelBuilder.Entity<UserSubscriptions>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Subscription)
                    .WithMany(p => p.UserSubscriptions)
                    .HasForeignKey(d => d.SubscriptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionUsers_To_Subscriptions");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserSubscriptions)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SubscriptionUsers_To_Users");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            modelBuilder.Entity<WindowLocationConfiguration>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Configuration)
                    .WithMany(p => p.WindowLocationConfiguration)
                    .HasForeignKey(d => d.ConfigurationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WindowLocationConfiguration_To_Configurations");

                entity.HasOne(d => d.WindowLocation)
                    .WithMany(p => p.WindowLocationConfiguration)
                    .HasForeignKey(d => d.WindowLocationId)
                    .HasConstraintName("FK_WindowLocationConfiguration_To_WindowLocations");
            });

            modelBuilder.Entity<WindowLocations>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Window)
                    .WithMany(p => p.WindowLocations)
                    .HasForeignKey(d => d.WindowId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WindowLocations_To_Windows");
            });

            modelBuilder.Entity<ConfigurationWebApiService.Models.Windows>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}